ext {
    junitVersion = '5.5.2'
    restAssuredVersion = '4.1.2'
    allureVersion = '2.11.0'
    jacksonDatabindVersion = '2.9.7'
    slf4jVersion = '1.7.25'
    logbackVersion = '1.2.3'
    javafakerVersion = '0.16'
    jfairyVersion = '0.6.2'
    assertjVersion = '3.11.1'
    ownerVersion = '1.0.10'
    jodaTimeVersion = '2.10.5'
}

dependencies {
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
    testImplementation("org.junit.jupiter:junit-jupiter-api:$junitVersion")
    testImplementation("org.junit.jupiter:junit-jupiter-params:$junitVersion")

    implementation("io.rest-assured:rest-assured:$restAssuredVersion")
    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonDatabindVersion"

    compile group: 'org.aeonbits.owner', name: 'owner-java8', version: "$ownerVersion"

    compile "io.qameta.allure:allure-rest-assured:$allureVersion"

    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "ch.qos.logback:logback-classic:$logbackVersion"
    compile "ch.qos.logback:logback-core:$logbackVersion"

    compile "com.github.javafaker:javafaker:$javafakerVersion"
    compile "com.devskiller:jfairy:$jfairyVersion"

    compile("org.assertj:assertj-core:$assertjVersion")

    //mysql-connector-java
    compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.18'

//    JSch is a pure Java implementation of SSH2
    compile group: 'com.jcraft', name: 'jsch', version: '0.1.55'

//    The mongo-java-driver artifact is a valid OSGi bundle.
    compile 'org.mongodb:mongo-java-driver:3.10.2'

//    Maps MongoDB objects to POJOs using Jackson
    compile group: 'org.mongojack', name: 'mongojack', version: '2.8.0'

    // Datetime
    compile group: 'joda-time', name: 'joda-time', version: "$jodaTimeVersion"
}

test {
    useJUnitPlatform()
    systemProperties System.getProperties()
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        showStandardStreams = true
        exceptionFormat = 'full'
    }
    test.outputs.upToDateWhen { false }
}

task smoke(type: Test) {
    useJUnitPlatform() {
        includeTags 'smoke', 'fast'
        excludeTags 'flaky', 'slow'
    }

    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        showStandardStreams = true
        exceptionFormat = 'full'
    }
    test.outputs.upToDateWhen { false }
}

allure {
    version = "$allureVersion"
    aspectjweaver = true
    configuration = 'compile'
    autoconfigure = true
    downloadLink = "https://dl.bintray.com/qameta/maven/io/qameta/allure/allure-commandline/$allureVersion/allure-commandline-$allureVersion"+".zip"

    useJUnit5 {
        version = "$allureVersion"
    }
}