ext {
    testNgVersion = '6.13'
    selenideVersion = '5.2.2'
    allureVersion = '2.11.0'
}

dependencies {
    compile project(":api-test")
    compile "com.codeborne:selenide:$selenideVersion"
    compile "org.testng:testng:$testNgVersion"
    compile "org.codehaus.groovy:groovy-xml:2.4.15"
    testImplementation("io.qameta.allure:allure-selenide:$allureVersion")

//    Java mail
    compile group: 'javax.mail', name: 'javax.mail-api', version: '1.6.2'
    compile group: 'com.sun.mail', name: 'javax.mail', version: '1.6.2'
    compile group: 'com.sun.mail', name: 'smtp', version: '1.6.3'

    //    WebDriver manager for java
    implementation 'com.github.rosolko:wdm4j:1.0.0'

//  ashot  https://dou.ua/lenta/articles/highway-to-automation-hell/
//    https://github.com/pazone/ashot
    compile group: 'ru.yandex.qatools.ashot', name: 'ashot', version: '1.5.4'
}

allure {
    version = "$allureVersion"
    aspectjweaver = true
    autoconfigure = true

//    resultsDir = file("${projectDir}/allure-results")
//    reportDir = file("${projectDir}/allure-report")
}

task testRemote(type: Test) {
    systemProperties['selenide.browser'] = 'remote'
    useTestNG() {
        useDefaultListeners = true
//        suites 'src/test/java/resources/TestNG.xml'
    }
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        exceptionFormat = 'full'
    }
    test.outputs.upToDateWhen { false }
    
    //    systemProperties System.properties
    systemProperties = [
            'file.encoding'   : 'UTF-8',
            'selenide.browser': 'chrome',
            'BUILD_URL'       : System.getenv()['BUILD_URL'],
    ]
}

task testFirefox(type: Test) {
    systemProperties['selenide.browser'] = 'firefox'
    useTestNG() {
        useDefaultListeners = true
    }
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        exceptionFormat = 'full'
    }
    test.outputs.upToDateWhen { false }
}

test {
    useTestNG() {
        useDefaultListeners = true
//        suites 'src/test/java/resources/TestNG.xml'
    }
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        exceptionFormat = 'full'
    }
    test.outputs.upToDateWhen { false }
    systemProperty "file.encoding", "utf-8"
}


task smoke(type: Test){
    useTestNG(){
        def threadCount = System.getProperty("threadCount", "2")
        suiteXmlBuilder().suite(name: 'smoke.tests', parallel: 'classes', 'thread-count': threadCount) {
            test (name : 'Smoke tests') {
                groups {
                    run{
                        'include' (name:'smoke')
                    }
                }
                packages {
                    'package' (name: 'com.lukspay.*')
                }
            }
        }
    }
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        exceptionFormat = 'full'
    }
    test.outputs.upToDateWhen { false }
}


